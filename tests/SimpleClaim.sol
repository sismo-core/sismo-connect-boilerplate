// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import {SimpleClaim} from "../contracts/SimpleClaim.sol";
import {BaseTest} from "./base/BaseTest.t.sol";

contract SimpleClaimTest is BaseTest {
  bytes16 public constant APP_ID = 0x112a692a2005259c25f6094161007967;
  bytes16 public constant GROUP_ID = 0xe9ed316946d3d98dfcd829a53ec9822e;

  SimpleClaim public simpleClaim;

  function setUp() public {
    // register the correct root in the dev staging registry tree
    _registerTreeRoot(8127481972001971140750938642089484964336940695632132593880909302134648926075);

    simpleClaim = new SimpleClaim(APP_ID, GROUP_ID);
  }

  function test_SimpleClaim() public {
    assertEq(simpleClaim.counter(), 0);

    // group membership of GROUP_ID
    // signature of uint256 3
    bytes
      memory response = hex"0000000000000000000000000000000000000000000000000000000000000020112a692a2005259c25f609416100796700000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c022201ff668cb3a3bed74387136be8df86edfaee8038587b36f0b7914bf2fcc83090ffcec91cc34bdbb261740bdf28ca43ce0e19cd4a0b93eb753bc9e2a5d358325ac2935aad8740d280ac2350a96d4c625e7556e2f8866bd2c7ad537a80fef2309bbbed0c4af0d37a7fe62795838e5e79d639cafa3e96ac86a9c550e88fa3f3f1e58ca090dea24c387ea284cc10125af877d376a28347b2aa13c311972882b122ce6ab012aee8f5c7a015ab121bc7801fb8ee4822119f914a0cd2b6839d1db321a051d5f6bc504e8aae3eedf63b918dc39ade85aaf3f9cf02e8e1685ba66edb708316a9ef52d7f835462c7d2acf9034c1ca2e7f8f88e414a6c7802ed15035e71000000000000000000000000000000000000000000000000000000000000000000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db7411f7fde533960ea368ab0af29e6690687bb97ff54af42f77a071adf0e5a0ef7b21a63725868405196971cad8f2e46ed111118a9869929d0f87c154c9c60d015f124bd705fd7680828b9d00982d08a5baef8249ad2e0dbcce3597a9afb1ad0cb90000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc00000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    simpleClaim.incrementWithSismoConnect(response, 3);
    assertEq(simpleClaim.counter(), 3);
  }
}
